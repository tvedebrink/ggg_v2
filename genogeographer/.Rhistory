geom_point(show.legend = FALSE, pch = 21) +
NULL
latlon_country %>% filter(grepl("sia", continent))
latlon_country %>% filter(grepl("sia", continent)) %>% filter(lat > 50)
latlon_country %>% filter(grepl("sia", continent)) %>% filter(lat > 50) %>% arrange(desc(n))
?`%ni%`
`%in%`
install.packages("intrval")
library(intrval)
latlon_country_col <- latlon_country %>% filter(country %in% c("Russia", "Siberia")) %>%
slice(sample(nrow(.))) %>% ## random
mutate(colour = colour_russia(row_number()/nrow(.))) %>%
bind_rows(latlon_country %>% filter(country %ni% c("Russia", "Siberia")) %>%
left_join(colour_contries %>% select(-id), by = c("continent", "country")))
latlon_country %>% filter(grepl("sia", continent)) %>% filter(lat > 50) %>% arrange(desc(n))
latlon_country_col %>%
ggplot(aes(x=long, y = lat, fill = I(colour), size = n)) +
geom_polygon(data=map_data("world"), aes(group=group, size = NULL),
colour="gray80",fill="gray90", show.legend = FALSE) +
geom_point(show.legend = FALSE, pch = 21) +
NULL
latlon_country_col
latlon_country_col %>% filter(is.na(colour))
colour_continents_legend <- colour_continents %>%
group_by(continent) %>%
filter(id %in% range(id)) %>%
mutate(
n = max(id),
id = c("min", "max")[seq_along(id)]
) %>%
ungroup() %>%
spread(key = id, value = colour) %>%
mutate(
max = ifelse(is.na(max), min, max),
y = row_number()
)
colour_continents_legend
source(paste0(path, "api_zscore.R"))
source(paste0(path, "api_LR_table.R"))
source(paste0(path, "tmp_db.R"))
test_samples_meta_result <- test_samples_meta_country_fix %>%
select(folder, file, data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country) %>%
mutate(x0 = purrr::map(data, ~ genotype_x0(.x))) %>%
mutate(n_loci = purrr::map_int(x0, ~ nrow(.x)))
test_samples_meta_country_fix
test_samples_meta_result <- test_samples_meta_country_fix %>%
select(folder, file, data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country)
test_samples_meta_result
genotype_x0
test_samples_meta_result$data[[1]]
test_samples_meta_result %>% head() %>% mutate(x0 = purrr::map(data, ~ genotype_x0(.x)))
test_samples_meta_result %>% map_int(data, ~nrow)
test_samples_meta_result %>% mutate(map_int(data, ~nrow))
test_samples_meta_result %>% mutate(map_int(data, ~nrow(.x)))
test_samples_meta_result %>% mutate(ndata = map_int(data, ~nrow(.x))) %>% count(ndata)
test_samples_meta_result %>% mutate(ndata = map_int(data, ~nrow(.x))) %>% count(ndata) %>% arrange(ndata)
test_samples_meta_country_fix %>%
select(folder, file, genotype = data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country)
test_samples_meta_country_fix %>%
select(folder, file, genotype = data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country) %>%
mutate(x0 = purrr::map(genotype, ~ genotype_x0(.x)))
test_samples_meta_result <- test_samples_meta_country_fix %>%
select(folder, file, genotype = data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country)
for(i in seq_len(nrow(test_samples_meta_result))) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
test_samples_meta_result$genotype[[i]] %>% Print()
genotype_x0 <- function(profile, locus = "locus", genotype = "genotype", ggg = ggg_allele_list){
if(genotype %in% names(profile)) genotype_ <- sym(genotype)
else genotype_ <- sym(genotype_guess(profile)[1])
if(locus %in% names(profile)) locus_ <- sym(locus)
else locus_ <- sym(locus_guess(profile)[1])
browser()
ggg %>% inner_join(profile %>% select(locus = !!locus_, genotype = !!genotype_), by = "locus") %>%
tidyr::extract(genotype, into = c("g1", "g2"), regex = "(.{1})(.{1})") %>%
mutate(
x0 = (g1 == x1) + (g2 == x1),
n2_x0 = (g1 == x2) + (g2 == x2)
) %>%
filter(x0 + n2_x0 == 2) %>%
select(locus, x0)
}
genotype_x0()test_samples_meta_result$genotype[[i]]
genotype_x0(test_samples_meta_result$genotype[[i]])
genotype_x0 <- function(profile, locus = "locus", genotype = "genotype", ggg = ggg_allele_list){
browser()
if(genotype %in% names(profile)) genotype_ <- sym(genotype)
else genotype_ <- sym(genotype_guess(profile)[1])
if(locus %in% names(profile)) locus_ <- sym(locus)
else locus_ <- sym(locus_guess(profile)[1])
browser()
ggg %>% inner_join(profile %>% select(locus = !!locus_, genotype = !!genotype_), by = "locus") %>%
tidyr::extract(genotype, into = c("g1", "g2"), regex = "(.{1})(.{1})") %>%
mutate(
x0 = (g1 == x1) + (g2 == x1),
n2_x0 = (g1 == x2) + (g2 == x2)
) %>%
filter(x0 + n2_x0 == 2) %>%
select(locus, x0)
}
genotype_x0(test_samples_meta_result$genotype[[i]])
genotype %in% names(profile)
genotype_guess(profile)
genotype_guess
genotype_x0(na.omit(test_samples_meta_result$genotype[[i]]))
genotype_guess(profile)
nrow(profiel)
nrow(profile)
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
m <- as.matrix(DF)
na.omit(m)
genotype_x0 <- function(profile, locus = "locus", genotype = "genotype", ggg = ggg_allele_list){
profile <- na.omit(profile)
if(genotype %in% names(profile)) genotype_ <- sym(genotype)
else genotype_ <- sym(genotype_guess(profile)[1])
if(locus %in% names(profile)) locus_ <- sym(locus)
else locus_ <- sym(locus_guess(profile)[1])
ggg %>% inner_join(profile %>% select(locus = !!locus_, genotype = !!genotype_), by = "locus") %>%
tidyr::extract(genotype, into = c("g1", "g2"), regex = "(.{1})(.{1})") %>%
mutate(
x0 = (g1 == x1) + (g2 == x1),
n2_x0 = (g1 == x2) + (g2 == x2)
) %>%
filter(x0 + n2_x0 == 2) %>%
select(locus, x0)
}
i
for(i in 2720:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>% Print()
genotype_x0 <- function(profile, locus = "locus", genotype = "genotype", ggg = ggg_allele_list){
profile <- na.omit(profile)
browser()
if(genotype %in% names(profile)) genotype_ <- sym(genotype)
else genotype_ <- sym(genotype_guess(profile)[1])
if(locus %in% names(profile)) locus_ <- sym(locus)
else locus_ <- sym(locus_guess(profile)[1])
ggg %>% inner_join(profile %>% select(locus = !!locus_, genotype = !!genotype_), by = "locus") %>%
tidyr::extract(genotype, into = c("g1", "g2"), regex = "(.{1})(.{1})") %>%
mutate(
x0 = (g1 == x1) + (g2 == x1),
n2_x0 = (g1 == x2) + (g2 == x2)
) %>%
filter(x0 + n2_x0 == 2) %>%
select(locus, x0)
}
genotype_x0(na.omit(test_samples_meta_result$genotype[[i]]))
profile
genotype_guess(profile)
map_lgl(profile, function(x) all(nchar(x)<=2) & mean(unlist(strsplit(paste(x),"")) %in% DNA_chars)
)
map_lgl(profile, function(x) all(nchar(x)<=2) & mean(unlist(strsplit(paste(x),"")) %in% c("A", "C", "G", "T", "N", "-"))
)
map_lgl(profile, function(x) all(nchar(x)<=2) & mean(unlist(strsplit(paste(x),"")) %in% c("A", "C", "G", "T", "N", "-")) > 0.9)
map_lgl(profile, function(x) all(nchar(x)<=2) & mean(unlist(strsplit(paste(x),"")) %in% c("A", "C", "G", "T", "N", "-")) > 0.95)
map_lgl(profile, function(x) all(nchar(x)<=2) & mean(unlist(strsplit(paste(x),"")) %in% c("A", "C", "G", "T", "N", "-")) > 0.99)
itest_samples_meta_result
test_samples_meta_result
for(i in 2791:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
genotype_x0 <- function(profile, locus = "locus", genotype = "genotype", ggg = ggg_allele_list){
profile <- na.omit(profile)
if(genotype %in% names(profile)) genotype_ <- sym(genotype)
else genotype_ <- sym(genotype_guess(profile)[1])
if(locus %in% names(profile)) locus_ <- sym(locus)
else locus_ <- sym(locus_guess(profile)[1])
ggg %>% inner_join(profile %>% select(locus = !!locus_, genotype = !!genotype_), by = "locus") %>%
tidyr::extract(genotype, into = c("g1", "g2"), regex = "(.{1})(.{1})") %>%
mutate(
x0 = (g1 == x1) + (g2 == x1),
n2_x0 = (g1 == x2) + (g2 == x2)
) %>%
filter(x0 + n2_x0 == 2) %>%
select(locus, x0)
}
for(i in 2791:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>% Print()
i
for(i in 2831:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>% Print()
i
for(i in 3502:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>% Print()
i
for(i in 3553:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>% Print()
i
for(i in 3592:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]] %>%
I
for(i in 3606:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
for(i in 3610:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
for(i in 3614:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
for(i in 3620:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
for(i in 3621:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
test_samples
test_samples %>% mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0)))
test_samples %>% mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0))) %>%
select(-data) %>% unnest(data_WHATWHAT)
test_samples %>%
mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0)),
n_WHATWHAT = map_int(data_WHATWHAT, ~nrow(.x))) %>%
filter(n_WHATWHAT > 0)
test_samples %>%
mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0) %>% select(-1)),
n_WHATWHAT = map_int(data_WHATWHAT, ~nrow(.x))) %>%
filter(n_WHATWHAT > 0) %>%
## test_meta <- read_excel(paste0(data_path, "/GGG2TestSamples.xlsx")) ## TT: Fixed Ecuador samples (See ECU.txt)
genomAD_meta <- read_excel(paste0(genomAD_path, "GGG2TestSamples_11032021.xlsx")) ##
test_samples %>%
mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0) %>% select(-1)),
n_WHATWHAT = map_int(data_WHATWHAT, ~nrow(.x))) %>%
filter(n_WHATWHAT > 0) %>%
unnest(data_WHATWHAT)
test_samples %>%
mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0) %>% select(-1)),
n_WHATWHAT = map_int(data_WHATWHAT, ~nrow(.x))) %>%
filter(n_WHATWHAT > 0) %>%
unnest(data_WHATWHAT) %>%
rio::export("whatwhat.xlsx")
test_samples <- zip_files %>%
purrr::map_df( ~ tibble(file = .x) %>%
rowwise() %>%
mutate(data = list(read_csv(file, col_types = cols()) %>% filter(rowSums(. == "WHATWHAT") == 0))) %>%
ungroup(), .id = "folder") %>%
mutate(
file = basename(file),
sample_name = sub("\\.csv", "", file)
)
test_samples %>%
mutate(data_WHATWHAT = purrr::map(data, ~.x %>% filter(rowSums(. == "WHATWHAT") > 0) %>% select(-1)),
n_WHATWHAT = map_int(data_WHATWHAT, ~nrow(.x))) %>%
filter(n_WHATWHAT > 0) %>%
unnest(data_WHATWHAT)
test_samples_meta <- test_samples %>%
left_join(genomAD_meta, by = c("sample_name" = "Filename"))
test_samples_meta_result <- test_samples_meta_country_fix %>%
select(folder, file, genotype = data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country) %>%
mutate(x0 = purrr::map(genotype, ~ genotype_x0(.x))) %>%
mutate(n_loci = purrr::map_int(x0, ~ nrow(.x)))
for(i in 1:nrow(test_samples_meta_result)) rr <- genotype_x0(test_samples_meta_result$genotype[[i]])
i
test_samples_meta_result$genotype[[i]]
test_samples_meta_result$genotype[[i]] %>% Print()
test_samples <- zip_files %>%
purrr::map_df( ~ tibble(file = .x) %>%
rowwise() %>%
mutate(data = list(read_csv(file, col_types = cols()) %>% filter(rowSums(. == "WHATWHAT") == 0))) %>%
ungroup(), .id = "folder") %>%
mutate(
file = basename(file),
sample_name = sub("\\.csv", "", file)
)
test_samples_meta %>% select(-c(Assembly_ID, Code, Continent_region_of_origin, Subregion)) %>%
select(-data) %>%
mutate(folder = sub("\\/\\/", "\\/", sub("^.*AIMs/", "", folder))) %>%
mutate(across(c(folder, Country_of_origin, Study, Continent), factor)) %>%
dt_table()
test_samples_meta_continent %>% kable_()
test_samples_meta_country %>% relocate(n, .after = Continent) %>% dt_simple()
latlon_continent <- test_samples_meta %>% count(long = Longitude, lat = Latitude, continent = Continent)
test_samples_meta_country_fix %>% count(continent = Continent, country) %>%
group_by(country) %>% mutate(N = row_number(), N = max(N)) %>%
filter(N > 1L) %>% select(-c(N, n)) %>%
ungroup() %>%
arrange(country) %>%
kable_()
test_samples_meta <- test_samples %>%
left_join(genomAD_meta, by = c("sample_name" = "Filename"))
test_samples_meta_continent <- test_samples_meta %>% count(Continent, Study) %>%
spread(Study, n, fill = 0L) %>%
mutate(Total = rowSums(select(., where(is.numeric))))
test_samples_meta_country <- test_samples_meta %>% count(Continent, Country_of_origin) %>%
group_by(Continent) %>% mutate(N = sum(n)) %>%
unite(Countries, Country_of_origin, n, sep = " (") %>%
summarise(
Countries = paste0(paste(Countries, collapse = "), "),")"),
n = N[1],
.groups = "drop"
)
test_samples_meta_country_fix <- test_samples_meta %>%
mutate(
Country_of_origin = trimws(sub("\\(.*", "", Country_of_origin)),
country = case_when(
Country_of_origin == "Abkhazia" ~ "Georgia",
Country_of_origin == "Bosnia-Herzegovina" ~ "Bosnia and Herzegovina",
Country_of_origin == "D.R. Congo" ~ "Congo, Dem. Rep.",
Country_of_origin == "Congo" ~ "Congo, Rep.",
Country_of_origin == "Czechoslovia" ~ "Czech Republic",
Country_of_origin == "Cypern, Tyrkisk" ~ "Turkey",
Country_of_origin %in% c("Adygea", "Chechnya") ~ "Russia",
Country_of_origin %in% c("Arizona", "Oklahoma", "USA") ~ "United States",
Country_of_origin == "Equador" ~ "Ecuador",
Country_of_origin %in% c("OrkneyIslands", "Scotland", "UK", "England") ~ "United Kingdom",
Country_of_origin == "Jordania" ~ "Jordan",
Country_of_origin == "Mongoliet" ~ "Mongolia",
Country_of_origin == "SierraLeone" ~ "Sierra Leone",
Country_of_origin == "Faroe Island" ~ "Denmark",
Country_of_origin == "Serbien/Montenegro" ~ "Montenegro",
Country_of_origin == "Sardinia" ~ "Italy",
Country_of_origin == "Spanien" ~ "Spain",
Country_of_origin == "Yugoslavia" ~ "Croatia",
Country_of_origin == "Western Sahara" ~ "Morocco",
Country_of_origin == "BotswanaOrNamibia" ~ "Botswana",
Country_of_origin %in% c("Korea", "South Korea", "Sydkorea") ~ "Korea, Rep.",
Country_of_origin == "PapuaNewGuinea" ~ "Papua New Guinea",
Country_of_origin == "SouthAfrica" ~ "South Africa",
Country_of_origin == "Ukraine" ~ "Ukrain",
grepl("Myan", Country_of_origin) ~ "Myanmar",
Country_of_origin == "Yemen" ~ "Yemen, Rep.",
Country_of_origin == "Saudi_Arabia" ~ "Saudi Arabia",
TRUE ~ Country_of_origin
)
)
latlon_country <- test_samples_meta_country_fix %>%
count(long = Longitude, lat = Latitude, continent = Continent, country)
test_samples_meta_result <- test_samples_meta_country_fix %>%
select(folder, file, genotype = data, sample_name, Country_of_origin, Study, Continent, Latitude, Longitude, country) %>%
mutate(x0 = purrr::map(genotype, ~ genotype_x0(.x))) %>%
mutate(n_loci = purrr::map_int(x0, ~ nrow(.x)))
ref_samples_result <- data_file %>%
mutate(across(starts_with("rs"), paste)) %>%
nest(data = starts_with("rs")) %>%
mutate(
data = purrr::map(data, ~ .x %>% gather(locus, genotype)),
x0 = purrr::map(data, ~ genotype_x0(.x))
) %>%
mutate(n_loci = purrr::map_int(x0, ~ nrow(.x)))
sessionInfo()
knitr:
knitr::spin("R/valid_v2.R")
work <- "work/"
data_path <- paste0("~/", work, "artikler/AIMs/data/valid_v2/data/")
data_path
paste0("~/", work, "artikler/AIMs/reference_DB/DB_17062020.Rds")
parallel::detectCores()
path <- ""
if(interactive()) path <- "R/" ## INTERACTIVE SESSION
source(paste0(path, "valid_preamble.R"))
library(maps)
theme_set(theme_minimal())
work <- ""
if(parallel::detectCores() < 10) work <- "work/"
work
data_path <- paste0("~/", work, "artikler/AIMs/data/valid_v2/data/")
genomAD_path <- paste0("~/", work, "artikler/AIMs/data/valid_v2/genomAD/")
zip_folders <- list.dirs(data_path)
zip_folders <- zip_folders[-1] %>%
set_names(sub(paste0(data_path, "/"), "", .))
zip_files <- zip_folders %>% lapply(list.files, full.names = TRUE)
zip_files <- c(zip_files,
set_names(list(list.files(paste0(genomAD_path, "/Profiler"), full.names = TRUE)), nm = genomAD_path))
test_samples <- zip_files %>%
purrr::map_df( ~ tibble(file = .x) %>%
rowwise() %>%
mutate(data = list(read_csv(file, col_types = cols()) %>% filter(rowSums(. == "WHATWHAT") == 0))) %>%
ungroup(), .id = "folder") %>%
mutate(
file = basename(file),
sample_name = sub("\\.csv", "", file)
)
test_samples
test_samples
zip_files
test_samples <- zip_files %>%
purrr::map_df( ~ tibble(file = .x) %>%
rowwise() %>%
mutate(data = list(read_csv(file, col_types = cols()) %>% filter(rowSums(. == "WHATWHAT") == 0))) %>%
ungroup(), .id = "folder") %>%
mutate(
file = basename(file),
sample_name = sub("\\.csv", "", file)
)
test_samples
## test_meta <- read_excel(paste0(data_path, "/GGG2TestSamples.xlsx")) ## TT: Fixed Ecuador samples (See ECU.txt)
genomAD_meta <- read_excel(paste0(genomAD_path, "GGG2TestSamples_11032021.xlsx")) ##
genomAD_meta
genomAD_meta %>% count(Study)
?knitr::load_cache
knitr::load_cache(label = "ggg_compute")
path <- "R/" ## INTERACTIVE SESSION
opts_chunk$get("cache.path")
knitr::opts_chunk$get("cache.path")
lazyLoad("R/valid_v2_cache/html/ggg_compute_36b3a267ef269f5ffa0f524d905c2e30")
lazyLoad("R/valid_v2_cache/html/ref_ggg_compute_7b0797001243799ef6dc3dc39d658872")
test_samples_meta_result_
ref_samples_result_
#' ### RGA
test_samples_meta_result_df_ %>% filter(Study == "RGA") %>% select(-Study) %>%
mutate(across(where(is.numeric), ~round(.x, 2)), across(where(is.character), ~factor(.x))) %>%
rio::export(file = paste0(file_path, "RGA.xlsx")) # dt_table()
path <- ""
if(interactive()){
path <- "R/" ## INTERACTIVE SESSION
}
source(paste0(path, "valid_preamble.R"))
library(maps)
lazyLoad("R/valid_v2_cache/html/ggg_compute_36b3a267ef269f5ffa0f524d905c2e30")
test_samples_meta_result_
lazyLoad("R/valid_v2_cache/html/ref_ggg_compute_7b0797001243799ef6dc3dc39d658872")
ref_samples_result_
lazyLoad("R/valid_v2_cache/html/outcome_5eb8bbf599488a2fe8e920d363802f23")
ref_samples_result_df
test_samples_meta_result_df
meta_Meta <- c('AFRICA' = 'Sub Sahara',
'HORN_AFRICA' = "Horn of Africa",
'N AFRICA' = "North Africa",
'EUROPE' = "Europe",
'M EAST' = 'Middle East',
'SC ASIA' = 'South/Central Asia',
'E ASIA' = "East Asia",
'WEST_GRL' = 'West Greenland',
'EAST_GRL' = 'East Greenland')
n_mM <- length(meta_Meta)
meta_Meta_admix <- t(outer(meta_Meta, meta_Meta, paste, sep = " & "))
meta_Meta_admix_ <- t(outer(rownames(meta_Meta_admix), colnames(meta_Meta_admix), paste, sep = " & "))
## Hack?
diag(meta_Meta_admix_) <- sub(" \\&.*", "", diag(meta_Meta_admix_))
meta_Meta_admix <- meta_Meta_admix %>% as.vector() %>% set_names(meta_Meta_admix_)
meta_Meta_admix <- meta_Meta_admix %>% split(sub(" \\&.*", "", names(.))) %>%
{.[names(meta_Meta)]} %>%
imap(~ c(.x[.y], .x[names(.x)!=.y])) %>% unname() %>%
unlist()
meta_Meta_admix_ <- c(meta_Meta, meta_Meta_admix)
meta_Meta_admix_ <- meta_Meta_admix_[unique(names(meta_Meta_admix_))]
## Not needed with hack..
meta_Meta_all <-
c(meta_Meta %>% {set_names(paste(., "&"), names(.))}, meta_Meta_admix)[sapply(seq_len(n_mM), function(i) c(i, i*n_mM+seq_len(n_mM)))]
Continent_levels <- c('Sub Sahara', 'Somalia', 'Horn of Africa', 'North Africa',
'Europe', 'Middle East',
'South/Central Asia', 'Central Asia', 'North Asia', 'North East Asia', 'East Asia',
'South America', 'North America')
first_cols <- c("Continent", "n_samples", "Rejected", "Ambiguous")
ref_samples_meta_result_df_ <- ref_samples_result_df %>%
mutate(
meta_result = map2(.x = meta, .y = meta_admix, .f = ~ bind_rows(.x, .y) %>% arrange(desc(logP))),
meta = NULL, meta_admix = NULL,
LR_meta_all = purrr::map(.x = LR_meta_all, ~ .x$LR),
outcome_all_accepted = ifelse(outcome_all_status == "Accepted", meta_Meta_admix_[outcome_all_accepted], outcome_all_status),
outcome_all_accepted = factor(outcome_all_accepted, levels = c("Rejected", "Ambiguous", unname(meta_Meta_admix_)))
) %>%
select(sample, Country_of_origin = pop, Continent, meta_result, LR_meta_all, outcome_all_accepted) %>%
select(-LR_meta_all) %>%
unnest(meta_result) %>%
mutate(
Continent = meta_Meta_admix_[Continent],
meta = meta_Meta_admix_[meta]
)
test_samples_meta_result_df_ <- test_samples_meta_result_df %>%
mutate(
meta_result = map2(.x = meta, .y = meta_admix, .f = ~ bind_rows(.x, .y) %>% arrange(desc(logP))),
meta = NULL, meta_admix = NULL,
LR_meta_all = purrr::map(.x = LR_meta_all, ~ .x$LR),
folder = sub("^.*valid_v2/data/","", folder),
outcome_all_accepted = ifelse(outcome_all_status == "Accepted", meta_Meta_admix_[outcome_all_accepted], outcome_all_status),
outcome_all_accepted = factor(outcome_all_accepted, levels = c("Rejected", "Ambiguous", unname(meta_Meta_admix_)))
) %>%
select(Study, folder, file, sample_name, Country_of_origin, Continent, meta_result, LR_meta_all, outcome_all_accepted) %>%
select(-LR_meta_all) %>%
unnest(meta_result) %>%
mutate(meta = meta_Meta_admix_[meta])
file_path <- "detailed_info/"
#' ### RGA
test_samples_meta_result_df_ %>% filter(Study == "RGA") %>% select(-Study) %>%
mutate(across(where(is.numeric), ~round(.x, 2)), across(where(is.character), ~factor(.x))) %>%
rio::export(file = paste0(file_path, "RGA.xlsx")) # dt_table()
paste0(file_path, "RGA.xlsx")
test_samples_meta_result_df_
getwd()
mkdir(file_path)
dir.create(file_path)
file_path <- paste0(path, "detailed_info/")
file_path
dir.create(file_path)
#' ### RGA
test_samples_meta_result_df_ %>% filter(Study == "RGA") %>% select(-Study) %>%
mutate(across(where(is.numeric), ~round(.x, 2)), across(where(is.character), ~factor(.x))) %>%
rio::export(file = paste0(file_path, "RGA.xlsx")) # dt_table()
dir.create(file_path)
dir.exists(file_path)
loo_update <- function(df_loo, x0){
df_loo <- df_loo %>% unnest(data) %>% inner_join(x0, by = c("locus", "x0")) %>%
mutate(x1 = x1 - x0, n = n-2L) %>%
mutate(x1 = ifelse(x1 < 0, 0L, x1)) %>% ## Account for non observed alleles in ref
select(-c(x0, z_raw, z_var, freq, logP, varlogP)) %>%
crossing(x0 = 0:2) %>%
bind_cols(ss_moments_(x0 = .$x0, x1 = .$x1, N = .$n)) %>%
mutate(
score = xlx(x1) + xlx(n-x1) - 2*log(2)*(x0==1), ## The unstandardised locus score
freq = (x1 + x0)/(n + 2), ## freqs relevant for log P
logP = log_P_(x0 = x0, p = freq)/log(10), ## log_10 scale
varlogP = varlog_P_(x0 = x0, n = n, p = freq)/(log(10)^2),  ## log_10 scale
z_raw = score - E_score
) %>% select(-score, -E_score) %>% rename(z_var = V_score) %>%
nest(data = c(locus, x1, n, x0, z_raw, z_var, freq, logP, varlogP))
}
